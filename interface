from PySide2 import QtGui
from PySide2.QtCore import QObject, Signal, Slot, QByteArray
from PySide2.QtGui import QPixmap, QImage
from PySide2.QtWidgets import QApplication, QMessageBox, QGraphicsView, QGraphicsScene
from PySide2.QtUiTools import QUiLoader

from threading import Thread
import threading
import numpy as np
import cv2


# 重写Signal类
class ShowImageSignal(QObject):
    # 定义一种信号
    image = Signal(QImage)


# 目标检测子线程
class DetectorThread(Thread):
    def __init__(self, showImageSignal):
        super().__init__()
        # 创建一个Signal实例对象
        self.showImageSignal = showImageSignal

    def run(self):
        print("这是子线程，线程的名称是：{0}".format(threading.current_thread().name))
        img = np.asarray([1, 2, 3])  # 返回的是array数据形式
        # 这边进行目标检测
        # 读取图片，然后将其转换成QImage形式进行发送
        # 从numpy中得到qimage图片
        imgfile = r'C:\Users\cumt\Desktop\rabbit.jpg'
        img = cv2.imread(imgfile)
        # # 通过opencv显示一张图片
        # cv2.imshow('imm', img)
        img = cv2.resize(src=img, dsize=None, fx=1, fy=1)
        # img2 = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        # image = QtGui.QImage(img2, img2.shape[1], img2.shape[0], img2.shape[1] * 3, QtGui.QImage.Format_BGR888)
        qImage = QtGui.QImage(img, img.shape[1], img.shape[0], img.shape[1] * 3, QtGui.QImage.Format_BGR888)
        # 需要发送QImage形式的图片
        self.showImageSignal.image.emit(qImage)


class Stats(object):
    def __init__(self):
        # 从文件中加载UI定义
        # 从 UI 定义中动态 创建一个相应的窗口对象
        # 注意：里面的控件对象也成为窗口对象的属性了
        # 比如 self.ui.button , self.ui.textEdit

        self.ui = QUiLoader().load(r'C:\Users\cumt\Desktop\helmet\helmetDetector.ui')
        # 是否检测了
        self.isDetect = None
        # step 1：创建Signal实例对象
        self.showImageSignal = ShowImageSignal()
        # 在主线程中接收图片，然后显示图片
        self.showImageSignal.image.connect(self.showImage)

        # 开辟一个新的进程进行检测, 然后发送图片给主线程
        self.detector = DetectorThread(self.showImageSignal)
        # step 2: 点击“开始检测”按钮，开辟多线程进行数据的运算
        self.ui.startButton.clicked.connect(self.handleCalc)
        # step 3: 点击“停止检测”按钮，停止进行检测
        self.ui.stopButton.clicked.connect(self.stopDetect)

    # 开始进行检测
    def handleCalc(self):
        self.detector.start()
        self.detector.join()

    # 停止进行检测
    def stopDetect(self):
        print("停止进行检测")
        # self.detector.stop()

    @Slot(QImage)
    def showImage(self, qImage):
        # 在这边可以显示图片
        # # 从numpy中得到qimage图片
        # imgfile = r'C:\Users\cumt\Desktop\rabbit.jpg'
        # img = cv2.imread(imgfile)
        # # 通过opencv显示一张 图片
        # cv2.imshow('ss', img)
        # img = cv2.resize(src=img, dsize=None, fx=1, fy=1)
        # img2 = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        # # image = QtGui.QImage(img2, img2.shape[1], img2.shape[0], img2.shape[1] * 3, QtGui.QImage.Format_BGR888)
        # qImage = QtGui.QImage(img, img.shape[1], img.shape[0], img.shape[1] * 3, QtGui.QImage.Format_BGR888)

        print("这里是：{0}".format(threading.current_thread().name))
        print("在这里将要显示图片")
        # 将qImage的图片转成pixMap的图片
        pix = QtGui.QPixmap(qImage)  # 或者使用QPixmap.fromImage()方法也可以得到pixMap
        # 设置图片的大小
        pix = pix.scaled(260, 260)
        scene = QGraphicsScene()
        scene.addPixmap(pix)
        # 将scene添加到view中
        self.ui.graphicsView.setScene(scene)


if __name__ == "__main__":
    app = QApplication([])
    stats = Stats()
    stats.ui.show()
    app.exec_()
